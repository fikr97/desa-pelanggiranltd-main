-- Create the table to store role-based permissions
CREATE TABLE public.role_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role TEXT NOT NULL,
    permission TEXT NOT NULL,
    is_enabled BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    description TEXT, -- Optional: for clarity in the admin UI
    CONSTRAINT unique_role_permission UNIQUE (role, permission)
);

-- Add comments to the table and columns
COMMENT ON TABLE public.role_permissions IS 'Stores granular permissions for different roles within the application.';
COMMENT ON COLUMN public.role_permissions.role IS 'The role this permission applies to (e.g., "kadus").';
COMMENT ON COLUMN public.role_permissions.permission IS 'A unique string identifying the permission (e.g., "button:create:penduduk").';
COMMENT ON COLUMN public.role_permissions.is_enabled IS 'Whether the permission is currently active for the role.';
COMMENT ON COLUMN public.role_permissions.description IS 'A user-friendly description of the permission for the admin UI.';

-- Enable RLS for the new table
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for the role_permissions table itself

-- 1. Admins should have full access to manage all permissions.
-- I will assume a function `public.is_admin()` exists that returns true if the user is an admin.
CREATE POLICY "Allow full access to admins"
ON public.role_permissions
FOR ALL
USING (public.is_admin(auth.uid()))
WITH CHECK (public.is_admin(auth.uid()));

-- 2. Any authenticated user should be able to read the permissions for their own role.
-- This is necessary for the frontend to fetch the permissions for the logged-in user.
CREATE POLICY "Allow users to read their own roles permissions"
ON public.role_permissions
FOR SELECT
USING (
  EXISTS (
    SELECT 1
    FROM public.profiles
    WHERE user_id = auth.uid() AND public.role_permissions.role = profiles.role
  )
);


-- Seed initial permissions for the 'kadus' role.
-- They are all disabled by default for security. The admin will enable them as needed.
INSERT INTO public.role_permissions (role, permission, description, is_enabled)
VALUES
    ('kadus', 'sidebar:view:dashboard', 'Melihat menu Dashboard di sidebar', false),
    ('kadus', 'sidebar:view:penduduk', 'Melihat menu Penduduk di sidebar', false),
    ('kadus', 'button:create:penduduk', 'Akses tombol Tambah Penduduk', false),
    ('kadus', 'button:import:penduduk', 'Akses tombol Import Data Penduduk', false),
    ('kadus', 'button:edit:penduduk', 'Akses tombol Edit pada data penduduk', false),
    ('kadus', 'button:delete:penduduk', 'Akses tombol Hapus pada data penduduk', false),
    ('kadus', 'sidebar:view:keluarga', 'Melihat menu Keluarga di sidebar', false),
    ('kadus', 'button:manage:keluarga', 'Akses untuk mengelola data keluarga (tambah/edit/hapus)', false),
    ('kadus', 'sidebar:view:surat_keluar', 'Melihat menu Arsip Surat Keluar di sidebar', false),
    ('kadus', 'button:create:surat_keluar', 'Akses tombol Tambah Arsip Surat Keluar', false),
    ('kadus', 'button:edit:surat_keluar', 'Akses tombol Edit Arsip Surat Keluar', false),
    ('kadus', 'button:delete:surat_keluar', 'Akses tombol Hapus Arsip Surat Keluar', false),
    ('kadus', 'sidebar:view:berita', 'Melihat menu Berita di sidebar', false),
    ('kadus', 'button:manage:berita', 'Akses untuk mengelola Berita (tambah/edit/hapus)', false),
    ('kadus', 'sidebar:view:statistik', 'Melihat menu Statistik di sidebar', false),
    ('kadus', 'sidebar:view:laporan', 'Melihat menu Laporan di sidebar', false);
